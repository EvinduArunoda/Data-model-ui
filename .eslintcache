[{"D:\\Codiffer\\Data-model-ui\\src\\index.js":"1","D:\\Codiffer\\Data-model-ui\\src\\reportWebVitals.js":"2","D:\\Codiffer\\Data-model-ui\\src\\App.js":"3","D:\\Codiffer\\Data-model-ui\\src\\utils\\firebaseConfig.js":"4","D:\\Codiffer\\Data-model-ui\\src\\store.js":"5","D:\\Codiffer\\Data-model-ui\\src\\Containers\\LoginPage\\index.js":"6","D:\\Codiffer\\Data-model-ui\\src\\Containers\\HomePage\\index.js":"7","D:\\Codiffer\\Data-model-ui\\src\\Containers\\DashboardPage\\index.js":"8","D:\\Codiffer\\Data-model-ui\\src\\redux\\login\\reducer.js":"9","D:\\Codiffer\\Data-model-ui\\src\\redux\\login\\saga.js":"10","D:\\Codiffer\\Data-model-ui\\src\\Components\\LoadinfIndicator\\index.js":"11","D:\\Codiffer\\Data-model-ui\\src\\Components\\MenuBar\\index.js":"12","D:\\Codiffer\\Data-model-ui\\src\\redux\\login\\actions.js":"13","D:\\Codiffer\\Data-model-ui\\src\\Components\\LoadinfIndicator\\Circle.js":"14","D:\\Codiffer\\Data-model-ui\\src\\Components\\LoadinfIndicator\\Wrapper.js":"15","D:\\Codiffer\\Data-model-ui\\src\\Components\\react-notifications\\index.js":"16","D:\\Codiffer\\Data-model-ui\\src\\Components\\LoginForm\\index.js":"17","D:\\Codiffer\\Data-model-ui\\src\\Components\\react-notifications\\Notifications.js":"18","D:\\Codiffer\\Data-model-ui\\src\\Components\\react-notifications\\NotificationContainer.js":"19","D:\\Codiffer\\Data-model-ui\\src\\Components\\react-notifications\\NotificationManager.js":"20","D:\\Codiffer\\Data-model-ui\\src\\Components\\react-notifications\\Notification.js":"21"},{"size":1222,"mtime":1619327833379,"results":"22","hashOfConfig":"23"},{"size":375,"mtime":1619327833380,"results":"24","hashOfConfig":"23"},{"size":7737,"mtime":1619328566768,"results":"25","hashOfConfig":"23"},{"size":568,"mtime":1619327833381,"results":"26","hashOfConfig":"23"},{"size":1196,"mtime":1619327833381,"results":"27","hashOfConfig":"23"},{"size":217,"mtime":1619327833378,"results":"28","hashOfConfig":"23"},{"size":5614,"mtime":1621008539602,"results":"29","hashOfConfig":"23"},{"size":19437,"mtime":1619335028684,"results":"30","hashOfConfig":"23"},{"size":840,"mtime":1619327833380,"results":"31","hashOfConfig":"23"},{"size":747,"mtime":1619327833380,"results":"32","hashOfConfig":"23"},{"size":672,"mtime":1619327833376,"results":"33","hashOfConfig":"23"},{"size":1998,"mtime":1619348931828,"results":"34","hashOfConfig":"23"},{"size":514,"mtime":1619327833380,"results":"35","hashOfConfig":"23"},{"size":1133,"mtime":1619327833376,"results":"36","hashOfConfig":"23"},{"size":180,"mtime":1619327833376,"results":"37","hashOfConfig":"23"},{"size":271,"mtime":1619327833377,"results":"38","hashOfConfig":"23"},{"size":2238,"mtime":1619327833376,"results":"39","hashOfConfig":"23"},{"size":2080,"mtime":1619327833377,"results":"40","hashOfConfig":"23"},{"size":1278,"mtime":1619327833377,"results":"41","hashOfConfig":"23"},{"size":2907,"mtime":1619327833377,"results":"42","hashOfConfig":"23"},{"size":1801,"mtime":1619327833377,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1w8hmky",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"D:\\Codiffer\\Data-model-ui\\src\\index.js",[],["92","93"],"D:\\Codiffer\\Data-model-ui\\src\\reportWebVitals.js",[],"D:\\Codiffer\\Data-model-ui\\src\\App.js",["94","95"],"import './App.css';\r\nimport clsx from 'clsx';\r\nimport {compose} from \"redux\";\r\nimport { NavLink } from 'react-router-dom';\r\nimport {firestoreConnect, withFirebase} from \"react-redux-firebase\";\r\nimport {connect} from 'react-redux';\r\nimport MenuBar from \"./Components/MenuBar\";\r\nimport React from \"react\";\r\nimport LoginPage from './Containers/LoginPage/index';\r\nimport HomePage from './Containers/HomePage/index';\r\nimport DashboardPage from './Containers/DashboardPage/index';\r\nimport LoadingIndicator from \"./Components/LoadinfIndicator\";\r\nimport {Route, Switch} from \"react-router\";\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {auth} from \"./utils/firebaseConfig\";\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginLeft: 0,\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\nconst LinkBtn = React.forwardRef(function LinkBtn(props, ref) { // eslint-disable-line\r\n    return <NavLink to={props.to} {...props} innerRef={ref} />; // eslint-disable-line\r\n});\r\nfunction App(props) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n    if (!props.auth.isLoaded || props.loading) {\r\n        return <LoadingIndicator/>\r\n    }\r\n    const handleClick = async () => {\r\n        await auth.signOut();\r\n        window.location.href = '/';\r\n    };\r\n\r\n  return (\r\n      <>\r\n        <MenuBar />\r\n          {!props.auth.uid ? (\r\n              <Switch>\r\n                  <Route path=\"/\" component={LoginPage}/>\r\n              </Switch>\r\n          ) : (\r\n              <div className={classes.root}>\r\n                  <CssBaseline />\r\n                  <AppBar\r\n                      position=\"fixed\"\r\n                      className={clsx(classes.appBar, {\r\n                          [classes.appBarShift]: open,\r\n                      })}\r\n                  >\r\n                      <Toolbar>\r\n                          <IconButton\r\n                              color=\"inherit\"\r\n                              aria-label=\"open drawer\"\r\n                              onClick={handleDrawerOpen}\r\n                              edge=\"start\"\r\n                              className={clsx(classes.menuButton, open && classes.hide)}\r\n                          >\r\n                              <MenuIcon />\r\n                          </IconButton>\r\n                          <Typography variant=\"subtitle1\" className={classes.title}>\r\n                              Intrusion Detection System\r\n                          </Typography>\r\n                          {props.auth.uid ? (\r\n                              <div>\r\n                                  <Button onClick={handleClick} color=\"inherit\">\r\n                                      Logout\r\n                                  </Button>\r\n                              </div>\r\n                          ) : (\r\n                              <div/>\r\n                          )}\r\n                      </Toolbar>\r\n                  </AppBar>\r\n                  <Drawer\r\n                      className={classes.drawer}\r\n                      variant=\"persistent\"\r\n                      anchor=\"left\"\r\n                      open={open}\r\n                      classes={{\r\n                          paper: classes.drawerPaper,\r\n                      }}\r\n                  >\r\n                      <div className={classes.drawerHeader}>\r\n                          <IconButton onClick={handleDrawerClose}>\r\n                              {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n                          </IconButton>\r\n                      </div>\r\n                      <Divider />\r\n                      <List>\r\n                          {[{name:'Dataset Visualization',to:'/'}, {name:'Detected Attacks',to:'/detected-attacks'}].map((text, index) => (\r\n                              <ListItem component={LinkBtn} button key={text} to={text.to}>\r\n                                  <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                                  <ListItemText primary={text.name} />\r\n                              </ListItem>\r\n                          ))}\r\n                      </List>\r\n                  </Drawer>\r\n                  <main\r\n                      className={clsx(classes.content, {\r\n                          [classes.contentShift]: open,\r\n                      })}\r\n                  >\r\n                      <div className={classes.drawerHeader} />\r\n                      <Switch>\r\n                          <Route path=\"/detected-attacks\" component={HomePage}/>\r\n                          <Route exact path=\"/\" component={DashboardPage}/>\r\n                      </Switch>\r\n                  </main>\r\n              </div>\r\n\r\n          )}\r\n      </>\r\n  );\r\n}\r\nconst mapStateToProps = ({firebase,loginReducer}) => {\r\n  return {\r\n    auth: firebase.auth,\r\n    loading: loginReducer.loading\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps))(App);\r\n","D:\\Codiffer\\Data-model-ui\\src\\utils\\firebaseConfig.js",[],"D:\\Codiffer\\Data-model-ui\\src\\store.js",[],"D:\\Codiffer\\Data-model-ui\\src\\Containers\\LoginPage\\index.js",[],"D:\\Codiffer\\Data-model-ui\\src\\Containers\\HomePage\\index.js",["96","97"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Container from '@material-ui/core/Container';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {firestoreConnect, withFirebase} from \"react-redux-firebase\";\r\nimport {connect} from \"react-redux\";\r\nimport LoadingIndicator from \"../../Components/LoadinfIndicator\";\r\nimport firebase from \"firebase/app\";\r\nimport {history} from \"../../store\";\r\nimport DeleteForeverOutlinedIcon from '@material-ui/icons/DeleteForeverOutlined';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { CSVLink, CSVDownload} from \"react-csv\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 275,\r\n        marginBottom: 20\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: 0,\r\n    },\r\n    menuButton: {\r\n        marginTop: 20,\r\n    },\r\n    field: {\r\n        width: '100%',\r\n        marginBottom: 20,\r\n        backgroundColor: 'white'\r\n    },\r\n    table: {\r\n        minWidth: 400,\r\n    },\r\n});\r\n\r\n\r\nfunction HomePage(props) {\r\n    const classes = useStyles();\r\n    if (!props.Attacks) {\r\n        return <LoadingIndicator/>\r\n    }\r\n    const attacks = (props.Attacks);\r\n\r\n    const checkRead = async () => {\r\n        const doc = firebase.firestore().collection('Configs').doc('read_check');\r\n        await doc.update({\r\n            read: true\r\n        })\r\n    }\r\n    const deleteAlert = async (id) => {\r\n        const doc = firebase.firestore().collection('Attacks').doc(id);\r\n        await doc.delete()\r\n    }\r\n\r\n    checkRead();\r\n\r\n    function intersperse(arr, sep) {\r\n        if (arr.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        return arr.slice(1).reduce(function(xs, x, i) {\r\n            return xs.concat([sep, x]);\r\n        }, [arr[0]]);\r\n    }\r\n    const csvData = attacks.map(el => [el.timestamp.toDate().toLocaleString(), el.type, el.ipAddress])\r\n    return (\r\n        <Container maxWidth=\"md\">\r\n            <h2\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                }}\r\n            >\r\n                Attacks Detected\r\n            </h2>\r\n            <button>\r\n                <CSVLink data={csvData}>Download CSV</CSVLink>\r\n            </button>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            {attacks.map(el => (\r\n                <Card className={classes.root} key={el.id}>\r\n                    <CardContent>\r\n                        <Table className={classes.table} aria-label=\"simple table\">\r\n                            <TableBody>\r\n                                <TableRow >\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        Date :\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\">{el.timestamp.toDate().toLocaleString()}</TableCell>\r\n                                </TableRow>\r\n                                <TableRow >\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        Attack Type :\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\">{el.type}</TableCell>\r\n                                </TableRow>\r\n                                <TableRow >\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        Actions to take :\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\">{intersperse(el.actionsToTake,', ')}</TableCell>\r\n                                </TableRow>\r\n                                <TableRow >\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        IP address :\r\n                                    </TableCell>\r\n                                    \r\n                                    <TableCell align=\"left\">{el.ipAddress}</TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            style={{\r\n                                display: \"flex\",\r\n                                marginLeft: \"auto\",\r\n                                marginTop: 30\r\n                            }}\r\n                            color=\"inherit\"\r\n                            aria-label=\"menu\"\r\n                            onClick={()=>deleteAlert(el.id)}\r\n                        >\r\n                            <DeleteForeverOutlinedIcon />\r\n                        </IconButton>\r\n                    </CardContent>\r\n                </Card>\r\n                )\r\n            )}\r\n</Container>\r\n\r\n);\r\n}\r\nconst mapStateToProps = ({firestore}) => {\r\n    return {\r\n        Attacks: firestore.ordered['Attacks']\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default withRouter(compose(firestoreConnect(() => [\r\n    { collection: 'Attacks',\r\n    orderBy:[\"timestamp\",\"desc\"]}\r\n]),connect(mapStateToProps, mapDispatchToProps))(withFirebase(HomePage)));","D:\\Codiffer\\Data-model-ui\\src\\Containers\\DashboardPage\\index.js",["98","99","100","101","102","103","104","105","106","107"],"import React, { Fragment } from 'react';\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Container from '@material-ui/core/Container';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport Bars from 'react-bars';\r\nimport {compose} from \"redux\";\r\nimport {firestoreConnect, withFirebase} from \"react-redux-firebase\";\r\nimport {connect} from \"react-redux\";\r\nimport LoadingIndicator from \"../../Components/LoadinfIndicator\";\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {NotificationManager} from '../../Components/react-notifications';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport {history} from \"../../store\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        minWidth: 275,\r\n        marginBottom: 20\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: 0,\r\n    },\r\n    menuButton: {\r\n        marginTop: 20,\r\n    },\r\n    field: {\r\n        width: '100%',\r\n        marginBottom: 20,\r\n        backgroundColor: 'white'\r\n    },\r\n    table: {\r\n        minWidth: 400,\r\n    },\r\n    formControl: {\r\n        margin: 1,\r\n        minWidth: 120,\r\n    },\r\n});\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n\r\n}\r\n\r\n\r\nfunction DashboardPage({classes, Datasets, Notifications}) {\r\n\r\n    const [dataSet, setDataSet] = React.useState('UNSW-NB15');\r\n    const [open, setOpen] = React.useState(false);\r\n    const [_open, _setOpen] = React.useState(false);\r\n\r\n    const handleClick = () => {\r\n        _setOpen(true);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (Notifications) {\r\n            const read_check = Notifications[0];\r\n            if (!read_check.read) {\r\n                handleClick()\r\n            }\r\n        }\r\n    }, [Notifications]);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const _handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        _setOpen(false);\r\n    };\r\n\r\n    if (!Datasets) {\r\n        return <LoadingIndicator/>\r\n    }\r\n    const handleChange = event => {\r\n        setDataSet(event.target.value);\r\n    };\r\n\r\n    const dataset = (Datasets.filter(el => el.name === dataSet)[0]);\r\n\r\n    function intersperse(arr, sep) {\r\n        if (arr.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        return arr.slice(1).reduce(function(xs, x, i) {\r\n            return xs.concat([sep, x]);\r\n        }, [arr[0]]);\r\n    }\r\n\r\n    return(\r\n\r\n    <Container >\r\n        <Snackbar open={_open} autoHideDuration={6000} onClick={() => history.push('/detected-attacks')} onClose={_handleClose}>\r\n            <Alert onClose={_handleClose} severity=\"error\">\r\n                An intrusion detected !\r\n            </Alert>\r\n        </Snackbar>\r\n        {/*<Alert severity=\"error\">This is an error message!</Alert>*/}\r\n        <SimpleDialog open={open} dataSet={dataset} onClose={handleClose} />\r\n\r\n            <h1\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                }}\r\n            >\r\n                {dataset.name}\r\n            </h1>\r\n        <h5\r\n            style={{\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                color: 'blue'\r\n            }}\r\n            onClick={() => handleClickOpen()}\r\n        >\r\n            Click Here\r\n        </h5>\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={6} key={'1'}>\r\n\r\n\r\n            <Card className={classes.root}>\r\n                <h4\r\n                    style={{\r\n                        justifyContent: 'center',\r\n                        alignItems: 'center',\r\n                        paddingLeft: 20,\r\n                    }}\r\n                >\r\n                    Model Information\r\n                </h4>\r\n                <CardContent>\r\n                    <Table className={classes.table} aria-label=\"simple table\">\r\n                        <TableBody>\r\n                            <TableRow >\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    Dataset :\r\n                                </TableCell>\r\n\r\n                                <TableCell align=\"left\" >\r\n                                    <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                                    <Select\r\n                                        labelId=\"demo-simple-select-outlined-label\"\r\n                                        id=\"demo-simple-select-outlined\"\r\n                                        value={dataset.name}\r\n                                        onChange={handleChange}\r\n                                        style={{ borderRadius: 8 + 'px' }}\r\n                                    >\r\n                                        {Datasets.map(el => <MenuItem key={el.name} value={el.name}>{el.name}</MenuItem> )}\r\n                                    </Select>\r\n                                </FormControl>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow >\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    Algorithms used :\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">{intersperse(dataset.algorithms,', ')}</TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </CardContent>\r\n            </Card>\r\n                {/*<Card className={classes.root}>*/}\r\n                {/*    <h4*/}\r\n                {/*        style={{*/}\r\n                {/*            justifyContent: 'center',*/}\r\n                {/*            alignItems: 'center',*/}\r\n                {/*            paddingLeft: 20,*/}\r\n                {/*        }}*/}\r\n                {/*    >*/}\r\n                {/*        Performance Metrics*/}\r\n                {/*    </h4>*/}\r\n                {/*    <CardContent>*/}\r\n                {/*        <Table className={classes.table} aria-label=\"simple table\">*/}\r\n                {/*            <TableBody>*/}\r\n                {/*                <TableRow >*/}\r\n                {/*                    <TableCell component=\"th\" scope=\"row\">*/}\r\n                {/*                        Accuracy :*/}\r\n                {/*                    </TableCell>*/}\r\n                {/*                    <TableCell align=\"left\">{dataset.accuracy}</TableCell>*/}\r\n                {/*                </TableRow>*/}\r\n                {/*                <TableRow >*/}\r\n                {/*                    <TableCell component=\"th\" scope=\"row\">*/}\r\n                {/*                        FAR :*/}\r\n                {/*                    </TableCell>*/}\r\n                {/*                    <TableCell align=\"left\">{dataset.far}</TableCell>*/}\r\n                {/*                </TableRow>*/}\r\n                {/*                <TableRow >*/}\r\n                {/*                    <TableCell component=\"th\" scope=\"row\">*/}\r\n                {/*                        Recall :*/}\r\n                {/*                    </TableCell>*/}\r\n                {/*                    <TableCell align=\"left\">{dataset.recall}</TableCell>*/}\r\n                {/*                </TableRow>*/}\r\n                {/*                <TableRow >*/}\r\n                {/*                    <TableCell component=\"th\" scope=\"row\">*/}\r\n                {/*                        Precision :*/}\r\n                {/*                    </TableCell>*/}\r\n                {/*                    <TableCell align=\"left\">{dataset.precision}</TableCell>*/}\r\n                {/*                </TableRow>*/}\r\n                {/*                <TableRow >*/}\r\n                {/*                    <TableCell component=\"th\" scope=\"row\">*/}\r\n                {/*                        f1score :*/}\r\n                {/*                    </TableCell>*/}\r\n                {/*                    <TableCell align=\"left\">{dataset.f1_score}</TableCell>*/}\r\n                {/*                </TableRow>*/}\r\n                {/*            </TableBody>*/}\r\n                {/*        </Table>*/}\r\n                {/*    </CardContent>*/}\r\n                {/*</Card>*/}\r\n                {dataset.plot_features ?\r\n                    <Card className={classes.root}>\r\n                        <h3\r\n                            style={{\r\n                                justifyContent: 'center',\r\n                                alignItems: 'center',\r\n                                paddingLeft: 20,\r\n                            }}\r\n                        >\r\n                            Plot of Features\r\n                        </h3>\r\n                        <CardContent>\r\n                            <div>\r\n                                <a href={dataset.plot_features} target=\"_blank\">\r\n                                    <img src={dataset.plot_features} style={{ marginLeft: 60, height: 190, width: 400, display: 'flex' }} />\r\n                                </a>\r\n                            </div>\r\n                        </CardContent>\r\n                    </Card> : <div/> }\r\n            </Grid>\r\n            <Grid item xs={6} key={'2'}>\r\n            {/*<Card className={classes.root}>*/}\r\n            {/*    <h4*/}\r\n            {/*        style={{*/}\r\n            {/*            justifyContent: 'center',*/}\r\n            {/*            alignItems: 'center',*/}\r\n            {/*            paddingLeft: 20,*/}\r\n            {/*        }}*/}\r\n            {/*    >*/}\r\n            {/*        Attack Detection*/}\r\n            {/*    </h4>*/}\r\n            {/*    <CardContent>*/}\r\n\r\n            {/*        <Table className={classes.table} aria-label=\"simple table\">*/}\r\n            {/*                <TableHead>*/}\r\n            {/*                    <TableRow>*/}\r\n            {/*                        <TableCell></TableCell>*/}\r\n            {/*                        <TableCell align=\"center\">Predicted attack detection</TableCell>*/}\r\n            {/*                        <TableCell align=\"center\">Actual detection</TableCell>*/}\r\n            {/*                    </TableRow>*/}\r\n            {/*                </TableHead>*/}\r\n            {/*            <TableBody>*/}\r\n\r\n            {/*            <TableRow >*/}\r\n            {/*                    <TableCell component=\"th\" scope=\"row\">*/}\r\n            {/*                        Normal :*/}\r\n            {/*                    </TableCell>*/}\r\n            {/*                    <TableCell align=\"center\">{dataset.nor.predict ? 'Yes' : 'No'}</TableCell>*/}\r\n            {/*                    <TableCell align=\"center\">{dataset.nor.actual !== undefined ? dataset.nor.actual : '-'}</TableCell>*/}\r\n            {/*                </TableRow>*/}\r\n            {/*                <TableRow >*/}\r\n            {/*                    <TableCell component=\"th\" scope=\"row\">*/}\r\n            {/*                        DoS :*/}\r\n            {/*                    </TableCell>*/}\r\n            {/*                    <TableCell align=\"center\">{dataset.dos.predict ? 'Yes' : 'No'}</TableCell>*/}\r\n            {/*                    <TableCell align=\"center\">{dataset.dos.actual !== undefined ? dataset.dos.actual : '-'}</TableCell>*/}\r\n            {/*                </TableRow>*/}\r\n            {/*                <TableRow >*/}\r\n            {/*                    <TableCell component=\"th\" scope=\"row\">*/}\r\n            {/*                        SQL injection :*/}\r\n            {/*                    </TableCell>*/}\r\n            {/*                    <TableCell align=\"center\">{dataset.sql.predict ? 'Yes' : 'No'}</TableCell>*/}\r\n            {/*                    <TableCell align=\"center\">{dataset.sql.actual !== undefined ? dataset.sql.actual : '-'}</TableCell>*/}\r\n            {/*                </TableRow>*/}\r\n            {/*                <TableRow >*/}\r\n            {/*                    <TableCell component=\"th\" scope=\"row\">*/}\r\n            {/*                       Generic :*/}\r\n            {/*                    </TableCell>*/}\r\n            {/*                    <TableCell align=\"center\">{dataset.DDos.predict ? 'Yes' : 'No'}</TableCell>*/}\r\n            {/*                    <TableCell align=\"center\">{dataset.DDos.actual !== undefined ? dataset.DDos.actual : '-'}</TableCell>*/}\r\n            {/*                </TableRow>*/}\r\n            {/*                <TableRow >*/}\r\n            {/*                    <TableCell component=\"th\" scope=\"row\">*/}\r\n            {/*                        Other :*/}\r\n            {/*                    </TableCell>*/}\r\n            {/*                    <TableCell align=\"center\">{dataset.other.predict ? 'Yes' : 'No'}</TableCell>*/}\r\n            {/*                    <TableCell align=\"center\">{dataset.other.actual !== undefined ? dataset.other.actual : '-'}</TableCell>*/}\r\n            {/*                </TableRow>*/}\r\n            {/*            </TableBody>*/}\r\n            {/*        </Table>*/}\r\n            {/*    </CardContent>*/}\r\n            {/*</Card>*/}\r\n                {dataset.opt_corelation ?\r\n                <Card className={classes.root}>\r\n                    <h3\r\n                        style={{\r\n                            justifyContent: 'center',\r\n                            alignItems: 'center',\r\n                            paddingLeft: 20,\r\n                        }}\r\n                    >\r\n                       Output Corelation\r\n                    </h3>\r\n                        <CardContent>\r\n                            <div>\r\n                                <a href={dataset.opt_corelation} target=\"_blank\">\r\n                                    <img src={dataset.opt_corelation} style={{ marginLeft: 60, height: 400, width: 400, display: 'flex' }} />\r\n                                </a>\r\n                            </div>\r\n                        </CardContent>\r\n                </Card> : <div/> }\r\n            </Grid>\r\n        </Grid>\r\n        </Container>\r\n    )\r\n}\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 275,\r\n        marginBottom: 20\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: 0,\r\n    },\r\n    menuButton: {\r\n        marginTop: 20,\r\n    },\r\n    field: {\r\n        width: '100%',\r\n        marginBottom: 20,\r\n        backgroundColor: 'white'\r\n    },\r\n    table: {\r\n        minWidth: 400,\r\n    },\r\n});\r\nfunction SimpleDialog(props) {\r\n    const classes = useStyles();\r\n\r\n    const {\r\n        dataSet, onClose, open\r\n    } = props;\r\n    if (!dataSet ) {\r\n        return (<LoadingIndicator />);\r\n    }\r\n    const handleClose = () => {\r\n        onClose();\r\n    };\r\n\r\n    function intersperse(arr, sep) {\r\n        if (arr.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        return arr.slice(1).reduce(function(xs, x, i) {\r\n            return xs.concat([sep, x]);\r\n        }, [arr[0]]);\r\n    }\r\n\r\n\r\n    return (\r\n        <Dialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\r\n        <Container >\r\n            {/*<DialogTitle id=\"simple-dialog-title\">Add New Waste Type</DialogTitle>*/}\r\n            <h2\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    padding: 20,\r\n                }}\r\n            >\r\n                Dataset Visualizer\r\n            </h2>\r\n            <Card className={classes.root}>\r\n                <CardContent>\r\n                    <div>\r\n                        <a href={dataSet.visualizer_url} target=\"_blank\">\r\n                            <img src={dataSet.visualizer_url} style={{ marginTop: 20, height: 400, width: 400 }} />\r\n                        </a>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n            <h2\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    padding: 20,\r\n                }}\r\n            >\r\n                Dataset Details\r\n            </h2>\r\n            <Card className={classes.root}>\r\n                <CardContent>\r\n                    <Table className={classes.table} aria-label=\"simple table\">\r\n                        <TableBody>\r\n                            <TableRow >\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    Dataset :\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">{dataSet.name}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow >\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    Traffic Type :\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">{dataSet.traffic_type}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow >\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    Attack Type(s) :\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">{intersperse(dataSet.attack_type,', ')}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow >\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    Total number of features :\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">{dataSet.no_of_features}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow >\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    Data points :\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">{dataSet.data_points}</TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </CardContent>\r\n            </Card>\r\n        </Container>\r\n\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({firestore}) => {\r\n    return {\r\n        Datasets: firestore.ordered['Datasets'],\r\n        Notifications: firestore.ordered['Configs']\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default compose(firestoreConnect(() => [\r\n    { collection: 'Datasets' },\r\n    { collection: 'Configs' },\r\n]),connect(mapStateToProps, mapDispatchToProps))(withStyles(styles)(withFirebase(DashboardPage)));","D:\\Codiffer\\Data-model-ui\\src\\redux\\login\\reducer.js",["108"],"import produce from \"immer\";\r\n\r\nimport { LOGIN_USER, LOGIN_USER_ERROR, LOGIN_USER_SUCCESS, RETURN_STATE, } from \"./actions\";\r\n\r\nconst INIT_STATE = {\r\n    loggedIn: false,\r\n    loading: false,\r\n    error: null\r\n};\r\n\r\nexport default function loginReducer(state = INIT_STATE, action) {\r\n    return produce(state, draft => {\r\n        switch (action.type) {\r\n            case LOGIN_USER:\r\n                draft.loading = true;\r\n                break;\r\n            case LOGIN_USER_ERROR:\r\n                draft.error = action.payload;\r\n                draft.loading = false;\r\n                break;\r\n            case LOGIN_USER_SUCCESS:\r\n                draft.loggedIn = true;\r\n                draft.loading = false;\r\n                draft.error = null;\r\n                break;\r\n            default:\r\n              break;\r\n        }\r\n    });\r\n}\r\n","D:\\Codiffer\\Data-model-ui\\src\\redux\\login\\saga.js",[],"D:\\Codiffer\\Data-model-ui\\src\\Components\\LoadinfIndicator\\index.js",[],"D:\\Codiffer\\Data-model-ui\\src\\Components\\MenuBar\\index.js",[],"D:\\Codiffer\\Data-model-ui\\src\\redux\\login\\actions.js",[],["109","110"],"D:\\Codiffer\\Data-model-ui\\src\\Components\\LoadinfIndicator\\Circle.js",[],"D:\\Codiffer\\Data-model-ui\\src\\Components\\LoadinfIndicator\\Wrapper.js",[],"D:\\Codiffer\\Data-model-ui\\src\\Components\\react-notifications\\index.js",[],"D:\\Codiffer\\Data-model-ui\\src\\Components\\LoginForm\\index.js",[],"D:\\Codiffer\\Data-model-ui\\src\\Components\\react-notifications\\Notifications.js",[],"D:\\Codiffer\\Data-model-ui\\src\\Components\\react-notifications\\NotificationContainer.js",[],"D:\\Codiffer\\Data-model-ui\\src\\Components\\react-notifications\\NotificationManager.js",[],"D:\\Codiffer\\Data-model-ui\\src\\Components\\react-notifications\\Notification.js",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":5,"column":9,"nodeType":"117","messageId":"118","endLine":5,"endColumn":25},{"ruleId":"115","severity":1,"message":"119","line":5,"column":27,"nodeType":"117","messageId":"118","endLine":5,"endColumn":39},{"ruleId":"115","severity":1,"message":"120","line":16,"column":9,"nodeType":"117","messageId":"118","endLine":16,"endColumn":16},{"ruleId":"115","severity":1,"message":"121","line":19,"column":19,"nodeType":"117","messageId":"118","endLine":19,"endColumn":30},{"ruleId":"115","severity":1,"message":"122","line":1,"column":17,"nodeType":"117","messageId":"118","endLine":1,"endColumn":25},{"ruleId":"115","severity":1,"message":"123","line":10,"column":8,"nodeType":"117","messageId":"118","endLine":10,"endColumn":17},{"ruleId":"115","severity":1,"message":"124","line":11,"column":8,"nodeType":"117","messageId":"118","endLine":11,"endColumn":12},{"ruleId":"115","severity":1,"message":"125","line":21,"column":9,"nodeType":"117","messageId":"118","endLine":21,"endColumn":28},{"ruleId":"126","severity":1,"message":"127","line":250,"column":65,"nodeType":"128","endLine":250,"endColumn":80},{"ruleId":"129","severity":1,"message":"130","line":251,"column":37,"nodeType":"131","endLine":251,"endColumn":141},{"ruleId":"126","severity":1,"message":"127","line":332,"column":66,"nodeType":"128","endLine":332,"endColumn":81},{"ruleId":"129","severity":1,"message":"130","line":333,"column":37,"nodeType":"131","endLine":333,"endColumn":142},{"ruleId":"126","severity":1,"message":"127","line":407,"column":58,"nodeType":"128","endLine":407,"endColumn":73},{"ruleId":"129","severity":1,"message":"130","line":408,"column":29,"nodeType":"131","endLine":408,"endColumn":116},{"ruleId":"115","severity":1,"message":"132","line":3,"column":60,"nodeType":"117","messageId":"118","endLine":3,"endColumn":72},{"ruleId":"111","replacedBy":"133"},{"ruleId":"113","replacedBy":"134"},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"no-unused-vars","'firestoreConnect' is defined but never used.","Identifier","unusedVar","'withFirebase' is defined but never used.","'history' is defined but never used.","'CSVDownload' is defined but never used.","'Fragment' is defined but never used.","'TableHead' is defined but never used.","'Bars' is defined but never used.","'NotificationManager' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'RETURN_STATE' is defined but never used.",["135"],["136"],"no-global-assign","no-unsafe-negation"]