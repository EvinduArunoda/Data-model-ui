[{"/home/evindu/Projects/Private/Data-model-ui/src/index.js":"1","/home/evindu/Projects/Private/Data-model-ui/src/App.js":"2","/home/evindu/Projects/Private/Data-model-ui/src/reportWebVitals.js":"3","/home/evindu/Projects/Private/Data-model-ui/src/store.js":"4","/home/evindu/Projects/Private/Data-model-ui/src/utils/firebaseConfig.js":"5","/home/evindu/Projects/Private/Data-model-ui/src/Containers/LoginPage/index.js":"6","/home/evindu/Projects/Private/Data-model-ui/src/Containers/HomePage/index.js":"7","/home/evindu/Projects/Private/Data-model-ui/src/redux/login/reducer.js":"8","/home/evindu/Projects/Private/Data-model-ui/src/redux/login/saga.js":"9","/home/evindu/Projects/Private/Data-model-ui/src/Containers/DashboardPage/index.js":"10","/home/evindu/Projects/Private/Data-model-ui/src/Components/MenuBar/index.js":"11","/home/evindu/Projects/Private/Data-model-ui/src/Components/LoadinfIndicator/index.js":"12","/home/evindu/Projects/Private/Data-model-ui/src/redux/login/actions.js":"13","/home/evindu/Projects/Private/Data-model-ui/src/Components/LoadinfIndicator/Wrapper.js":"14","/home/evindu/Projects/Private/Data-model-ui/src/Components/LoadinfIndicator/Circle.js":"15","/home/evindu/Projects/Private/Data-model-ui/src/Components/LoginForm/index.js":"16","/home/evindu/Projects/Private/Data-model-ui/src/Components/react-notifications/index.js":"17","/home/evindu/Projects/Private/Data-model-ui/src/Components/react-notifications/Notifications.js":"18","/home/evindu/Projects/Private/Data-model-ui/src/Components/react-notifications/NotificationManager.js":"19","/home/evindu/Projects/Private/Data-model-ui/src/Components/react-notifications/NotificationContainer.js":"20","/home/evindu/Projects/Private/Data-model-ui/src/Components/react-notifications/Notification.js":"21"},{"size":1185,"mtime":1617895932324,"results":"22","hashOfConfig":"23"},{"size":7705,"mtime":1617908409849,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1617895932324,"results":"25","hashOfConfig":"23"},{"size":1155,"mtime":1617895932324,"results":"26","hashOfConfig":"23"},{"size":550,"mtime":1617895932324,"results":"27","hashOfConfig":"23"},{"size":206,"mtime":1617895932324,"results":"28","hashOfConfig":"23"},{"size":4907,"mtime":1617895932324,"results":"29","hashOfConfig":"23"},{"size":810,"mtime":1617895932324,"results":"30","hashOfConfig":"23"},{"size":720,"mtime":1617895932324,"results":"31","hashOfConfig":"23"},{"size":15664,"mtime":1617895932324,"results":"32","hashOfConfig":"23"},{"size":1919,"mtime":1617904825107,"results":"33","hashOfConfig":"23"},{"size":649,"mtime":1617895932324,"results":"34","hashOfConfig":"23"},{"size":489,"mtime":1617895932324,"results":"35","hashOfConfig":"23"},{"size":170,"mtime":1617895932324,"results":"36","hashOfConfig":"23"},{"size":1080,"mtime":1617895932324,"results":"37","hashOfConfig":"23"},{"size":2156,"mtime":1617895932324,"results":"38","hashOfConfig":"23"},{"size":265,"mtime":1617895932324,"results":"39","hashOfConfig":"23"},{"size":2016,"mtime":1617895932324,"results":"40","hashOfConfig":"23"},{"size":2772,"mtime":1617895932324,"results":"41","hashOfConfig":"23"},{"size":1226,"mtime":1617895932324,"results":"42","hashOfConfig":"23"},{"size":1727,"mtime":1617895932324,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1go7oxu",{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/home/evindu/Projects/Private/Data-model-ui/src/index.js",[],["90","91"],"/home/evindu/Projects/Private/Data-model-ui/src/App.js",["92","93"],"/home/evindu/Projects/Private/Data-model-ui/src/reportWebVitals.js",[],"/home/evindu/Projects/Private/Data-model-ui/src/store.js",[],"/home/evindu/Projects/Private/Data-model-ui/src/utils/firebaseConfig.js",[],"/home/evindu/Projects/Private/Data-model-ui/src/Containers/LoginPage/index.js",[],"/home/evindu/Projects/Private/Data-model-ui/src/Containers/HomePage/index.js",["94","95"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Container from '@material-ui/core/Container';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport {withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\nimport {firestoreConnect, withFirebase} from \"react-redux-firebase\";\nimport {connect} from \"react-redux\";\nimport LoadingIndicator from \"../../Components/LoadinfIndicator\";\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n        marginBottom: 20\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 0,\n    },\n    menuButton: {\n        marginTop: 20,\n    },\n    field: {\n        width: '100%',\n        marginBottom: 20,\n        backgroundColor: 'white'\n    },\n    table: {\n        minWidth: 400,\n    },\n});\n\n\nfunction HomePage(props) {\n    const classes = useStyles();\n    if (!props.Datasets) {\n        return <LoadingIndicator/>\n    }\n    const dataset = (props.Datasets[0]);\n\n    function intersperse(arr, sep) {\n        if (arr.length === 0) {\n            return [];\n        }\n\n        return arr.slice(1).reduce(function(xs, x, i) {\n            return xs.concat([sep, x]);\n        }, [arr[0]]);\n    }\n    return (\n        <Container maxWidth=\"md\">\n            <h2\n                style={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    padding: 20,\n                }}\n            >\n                Dataset Visualizer\n            </h2>\n        <Card className={classes.root}>\n            <CardContent>\n                   <div>\n                       <a href={dataset.visualizer_url} target=\"_blank\">\n                       <img src={dataset.visualizer_url} style={{ marginTop: 20 }} />\n                       </a>\n                   </div>\n            </CardContent>\n        </Card>\n            <h2\n                style={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    padding: 20,\n                }}\n            >\n                Dataset Details\n            </h2>\n            <Card className={classes.root}>\n                <CardContent>\n                        <Table className={classes.table} aria-label=\"simple table\">\n                            <TableBody>\n                                <TableRow >\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        Dataset :\n                                    </TableCell>\n                                    <TableCell align=\"left\">{dataset.name}</TableCell>\n                                </TableRow>\n                                <TableRow >\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        Traffic Type :\n                                    </TableCell>\n                                    <TableCell align=\"left\">{dataset.traffic_type}</TableCell>\n                                </TableRow>\n                                <TableRow >\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        Attack Type(s) :\n                                    </TableCell>\n                                    <TableCell align=\"left\">{intersperse(dataset.attack_type,', ')}</TableCell>\n                                </TableRow>\n                                <TableRow >\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        Total number of features :\n                                    </TableCell>\n                                    <TableCell align=\"left\">{dataset.no_of_features}</TableCell>\n                                </TableRow>\n                                <TableRow >\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        Data points :\n                                    </TableCell>\n                                    <TableCell align=\"left\">{dataset.data_points}</TableCell>\n                                </TableRow>\n                            </TableBody>\n                        </Table>\n                </CardContent>\n            </Card>\n</Container>\n\n);\n}\nconst mapStateToProps = ({firestore}) => {\n    return {\n        Datasets: firestore.ordered['Datasets']\n    }\n};\n\nconst mapDispatchToProps = {};\n\nexport default withRouter(compose(firestoreConnect(() => [\n    { collection: 'Datasets' },\n]),connect(mapStateToProps, mapDispatchToProps))(withFirebase(HomePage)));","/home/evindu/Projects/Private/Data-model-ui/src/redux/login/reducer.js",["96"],"import produce from \"immer\";\n\nimport { LOGIN_USER, LOGIN_USER_ERROR, LOGIN_USER_SUCCESS, RETURN_STATE, } from \"./actions\";\n\nconst INIT_STATE = {\n    loggedIn: false,\n    loading: false,\n    error: null\n};\n\nexport default function loginReducer(state = INIT_STATE, action) {\n    return produce(state, draft => {\n        switch (action.type) {\n            case LOGIN_USER:\n                draft.loading = true;\n                break;\n            case LOGIN_USER_ERROR:\n                draft.error = action.payload;\n                draft.loading = false;\n                break;\n            case LOGIN_USER_SUCCESS:\n                draft.loggedIn = true;\n                draft.loading = false;\n                draft.error = null;\n                break;\n            default:\n              break;\n        }\n    });\n}\n","/home/evindu/Projects/Private/Data-model-ui/src/redux/login/saga.js",[],"/home/evindu/Projects/Private/Data-model-ui/src/Containers/DashboardPage/index.js",["97","98","99","100"],"import React, { Fragment } from 'react';\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Container from '@material-ui/core/Container';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableHead from '@material-ui/core/TableHead';\nimport Bars from 'react-bars';\nimport {compose} from \"redux\";\nimport {firestoreConnect, withFirebase} from \"react-redux-firebase\";\nimport {connect} from \"react-redux\";\nimport LoadingIndicator from \"../../Components/LoadinfIndicator\";\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Dialog from '@material-ui/core/Dialog';\nimport Grid from '@material-ui/core/Grid';\nimport {NotificationManager} from '../../Components/react-notifications';\nconst styles = theme => ({\n    root: {\n        minWidth: 275,\n        marginBottom: 20\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 0,\n    },\n    menuButton: {\n        marginTop: 20,\n    },\n    field: {\n        width: '100%',\n        marginBottom: 20,\n        backgroundColor: 'white'\n    },\n    table: {\n        minWidth: 400,\n    },\n    formControl: {\n        margin: 1,\n        minWidth: 120,\n    },\n});\n\nfunction DashboardPage({classes, Datasets}) {\n    React.useEffect(() => {\n        console.log('here')\n        NotificationManager.warning(\n            'this.props.error',\n            \"Login Error\",\n            3000,\n            null,\n            null,\n            ''\n        )\n    }, [Datasets]);\n    const [dataSet, setDataSet] = React.useState('UNSW-NB15');\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n    if (!Datasets) {\n        return <LoadingIndicator/>\n    }\n    const handleChange = event => {\n        setDataSet(event.target.value);\n    };\n\n    const dataset = (Datasets.filter(el => el.name === dataSet)[0]);\n\n    function intersperse(arr, sep) {\n        if (arr.length === 0) {\n            return [];\n        }\n\n        return arr.slice(1).reduce(function(xs, x, i) {\n            return xs.concat([sep, x]);\n        }, [arr[0]]);\n    }\n\n    return(\n\n    <Container >\n        <SimpleDialog open={open} dataSet={dataset} onClose={handleClose} />\n\n            <h1\n                style={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                }}\n            >\n                {dataset.name}\n            </h1>\n        <h5\n            style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                color: 'blue'\n            }}\n            onClick={() => handleClickOpen()}\n        >\n            Click Here\n        </h5>\n        <Grid container spacing={3}>\n            <Grid item xs={6} key={'1'}>\n\n\n            <Card className={classes.root}>\n                <h4\n                    style={{\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        paddingLeft: 20,\n                    }}\n                >\n                    Model Information\n                </h4>\n                <CardContent>\n                    <Table className={classes.table} aria-label=\"simple table\">\n                        <TableBody>\n                            <TableRow >\n                                <TableCell component=\"th\" scope=\"row\">\n                                    Dataset :\n                                </TableCell>\n\n                                <TableCell align=\"left\" >\n                                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                                    <Select\n                                        labelId=\"demo-simple-select-outlined-label\"\n                                        id=\"demo-simple-select-outlined\"\n                                        value={dataset.name}\n                                        onChange={handleChange}\n                                        style={{ borderRadius: 8 + 'px' }}\n                                    >\n                                        {Datasets.map(el => <MenuItem key={el.name} value={el.name}>{el.name}</MenuItem> )}\n                                    </Select>\n                                </FormControl>\n                                </TableCell>\n                            </TableRow>\n                            <TableRow >\n                                <TableCell component=\"th\" scope=\"row\">\n                                    Algorithms used :\n                                </TableCell>\n                                <TableCell align=\"left\">{intersperse(dataset.algorithms,', ')}</TableCell>\n                            </TableRow>\n                        </TableBody>\n                    </Table>\n                </CardContent>\n            </Card>\n                <Card className={classes.root}>\n                    <h4\n                        style={{\n                            justifyContent: 'center',\n                            alignItems: 'center',\n                            paddingLeft: 20,\n                        }}\n                    >\n                        Performance Metrics\n                    </h4>\n                    <CardContent>\n                        <Table className={classes.table} aria-label=\"simple table\">\n                            <TableBody>\n                                <TableRow >\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        Accuracy :\n                                    </TableCell>\n                                    <TableCell align=\"left\">{dataset.accuracy}</TableCell>\n                                </TableRow>\n                                <TableRow >\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        FAR :\n                                    </TableCell>\n                                    <TableCell align=\"left\">{dataset.far}</TableCell>\n                                </TableRow>\n                                <TableRow >\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        Recall :\n                                    </TableCell>\n                                    <TableCell align=\"left\">{dataset.recall}</TableCell>\n                                </TableRow>\n                                <TableRow >\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        Precision :\n                                    </TableCell>\n                                    <TableCell align=\"left\">{dataset.precision}</TableCell>\n                                </TableRow>\n                                <TableRow >\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        f1score :\n                                    </TableCell>\n                                    <TableCell align=\"left\">{dataset.f1_score}</TableCell>\n                                </TableRow>\n                            </TableBody>\n                        </Table>\n                    </CardContent>\n                </Card>\n            </Grid>\n            <Grid item xs={6} key={'2'}>\n            <Card className={classes.root}>\n                <h4\n                    style={{\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        paddingLeft: 20,\n                    }}\n                >\n                    Attack Detection\n                </h4>\n                <CardContent>\n\n                    <Table className={classes.table} aria-label=\"simple table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell></TableCell>\n                                    <TableCell align=\"center\">Predicted attack detection</TableCell>\n                                    <TableCell align=\"center\">Actual detection</TableCell>\n                                </TableRow>\n                            </TableHead>\n                        <TableBody>\n\n                        <TableRow >\n                                <TableCell component=\"th\" scope=\"row\">\n                                    Normal :\n                                </TableCell>\n                                <TableCell align=\"center\">{dataset.nor.predict ? 'Yes' : 'No'}</TableCell>\n                                <TableCell align=\"center\">{dataset.nor.actual !== undefined ? dataset.nor.actual : '-'}</TableCell>\n                            </TableRow>\n                            <TableRow >\n                                <TableCell component=\"th\" scope=\"row\">\n                                    DoS :\n                                </TableCell>\n                                <TableCell align=\"center\">{dataset.dos.predict ? 'Yes' : 'No'}</TableCell>\n                                <TableCell align=\"center\">{dataset.dos.actual !== undefined ? dataset.dos.actual : '-'}</TableCell>\n                            </TableRow>\n                            <TableRow >\n                                <TableCell component=\"th\" scope=\"row\">\n                                    SQL injection :\n                                </TableCell>\n                                <TableCell align=\"center\">{dataset.sql.predict ? 'Yes' : 'No'}</TableCell>\n                                <TableCell align=\"center\">{dataset.sql.actual !== undefined ? dataset.sql.actual : '-'}</TableCell>\n                            </TableRow>\n                            <TableRow >\n                                <TableCell component=\"th\" scope=\"row\">\n                                   Generic :\n                                </TableCell>\n                                <TableCell align=\"center\">{dataset.DDos.predict ? 'Yes' : 'No'}</TableCell>\n                                <TableCell align=\"center\">{dataset.DDos.actual !== undefined ? dataset.DDos.actual : '-'}</TableCell>\n                            </TableRow>\n                            <TableRow >\n                                <TableCell component=\"th\" scope=\"row\">\n                                    Other :\n                                </TableCell>\n                                <TableCell align=\"center\">{dataset.other.predict ? 'Yes' : 'No'}</TableCell>\n                                <TableCell align=\"center\">{dataset.other.actual !== undefined ? dataset.other.actual : '-'}</TableCell>\n                            </TableRow>\n                        </TableBody>\n                    </Table>\n                </CardContent>\n            </Card>\n            </Grid>\n        </Grid>\n        </Container>\n    )\n}\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n        marginBottom: 20\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 0,\n    },\n    menuButton: {\n        marginTop: 20,\n    },\n    field: {\n        width: '100%',\n        marginBottom: 20,\n        backgroundColor: 'white'\n    },\n    table: {\n        minWidth: 400,\n    },\n});\nfunction SimpleDialog(props) {\n    const classes = useStyles();\n\n    const {\n        dataSet, onClose, open\n    } = props;\n    if (!dataSet ) {\n        return (<LoadingIndicator />);\n    }\n    const handleClose = () => {\n        onClose();\n    };\n\n    function intersperse(arr, sep) {\n        if (arr.length === 0) {\n            return [];\n        }\n\n        return arr.slice(1).reduce(function(xs, x, i) {\n            return xs.concat([sep, x]);\n        }, [arr[0]]);\n    }\n\n\n    return (\n        <Dialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n        <Container >\n            {/*<DialogTitle id=\"simple-dialog-title\">Add New Waste Type</DialogTitle>*/}\n            <h2\n                style={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    padding: 20,\n                }}\n            >\n                Dataset Visualizer\n            </h2>\n            <Card className={classes.root}>\n                <CardContent>\n                    <div>\n                        <a href={dataSet.visualizer_url} target=\"_blank\">\n                            <img src={dataSet.visualizer_url} style={{ marginTop: 20, height: 400, width: 400 }} />\n                        </a>\n                    </div>\n                </CardContent>\n            </Card>\n            <h2\n                style={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    padding: 20,\n                }}\n            >\n                Dataset Details\n            </h2>\n            <Card className={classes.root}>\n                <CardContent>\n                    <Table className={classes.table} aria-label=\"simple table\">\n                        <TableBody>\n                            <TableRow >\n                                <TableCell component=\"th\" scope=\"row\">\n                                    Dataset :\n                                </TableCell>\n                                <TableCell align=\"left\">{dataSet.name}</TableCell>\n                            </TableRow>\n                            <TableRow >\n                                <TableCell component=\"th\" scope=\"row\">\n                                    Traffic Type :\n                                </TableCell>\n                                <TableCell align=\"left\">{dataSet.traffic_type}</TableCell>\n                            </TableRow>\n                            <TableRow >\n                                <TableCell component=\"th\" scope=\"row\">\n                                    Attack Type(s) :\n                                </TableCell>\n                                <TableCell align=\"left\">{intersperse(dataSet.attack_type,', ')}</TableCell>\n                            </TableRow>\n                            <TableRow >\n                                <TableCell component=\"th\" scope=\"row\">\n                                    Total number of features :\n                                </TableCell>\n                                <TableCell align=\"left\">{dataSet.no_of_features}</TableCell>\n                            </TableRow>\n                            <TableRow >\n                                <TableCell component=\"th\" scope=\"row\">\n                                    Data points :\n                                </TableCell>\n                                <TableCell align=\"left\">{dataSet.data_points}</TableCell>\n                            </TableRow>\n                        </TableBody>\n                    </Table>\n                </CardContent>\n            </Card>\n        </Container>\n\n        </Dialog>\n    );\n}\n\nconst mapStateToProps = ({firestore}) => {\n    return {\n        Datasets: firestore.ordered['Datasets']\n    }\n};\n\nconst mapDispatchToProps = {};\n\nexport default compose(firestoreConnect(() => [\n    { collection: 'Datasets' },\n]),connect(mapStateToProps, mapDispatchToProps))(withStyles(styles)(withFirebase(DashboardPage)));","/home/evindu/Projects/Private/Data-model-ui/src/Components/MenuBar/index.js",[],"/home/evindu/Projects/Private/Data-model-ui/src/Components/LoadinfIndicator/index.js",[],"/home/evindu/Projects/Private/Data-model-ui/src/redux/login/actions.js",[],"/home/evindu/Projects/Private/Data-model-ui/src/Components/LoadinfIndicator/Wrapper.js",[],"/home/evindu/Projects/Private/Data-model-ui/src/Components/LoadinfIndicator/Circle.js",[],"/home/evindu/Projects/Private/Data-model-ui/src/Components/LoginForm/index.js",[],"/home/evindu/Projects/Private/Data-model-ui/src/Components/react-notifications/index.js",[],"/home/evindu/Projects/Private/Data-model-ui/src/Components/react-notifications/Notifications.js",[],"/home/evindu/Projects/Private/Data-model-ui/src/Components/react-notifications/NotificationManager.js",[],"/home/evindu/Projects/Private/Data-model-ui/src/Components/react-notifications/NotificationContainer.js",[],"/home/evindu/Projects/Private/Data-model-ui/src/Components/react-notifications/Notification.js",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":4,"column":9,"nodeType":"107","messageId":"108","endLine":4,"endColumn":25},{"ruleId":"105","severity":1,"message":"109","line":4,"column":27,"nodeType":"107","messageId":"108","endLine":4,"endColumn":39},{"ruleId":"110","severity":1,"message":"111","line":72,"column":57,"nodeType":"112","endLine":72,"endColumn":72},{"ruleId":"113","severity":1,"message":"114","line":73,"column":24,"nodeType":"115","endLine":73,"endColumn":86},{"ruleId":"105","severity":1,"message":"116","line":3,"column":60,"nodeType":"107","messageId":"108","endLine":3,"endColumn":72},{"ruleId":"105","severity":1,"message":"117","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":25},{"ruleId":"105","severity":1,"message":"118","line":11,"column":8,"nodeType":"107","messageId":"108","endLine":11,"endColumn":12},{"ruleId":"110","severity":1,"message":"111","line":341,"column":58,"nodeType":"112","endLine":341,"endColumn":73},{"ruleId":"113","severity":1,"message":"114","line":342,"column":29,"nodeType":"115","endLine":342,"endColumn":116},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"no-unused-vars","'firestoreConnect' is defined but never used.","Identifier","unusedVar","'withFirebase' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'RETURN_STATE' is defined but never used.","'Fragment' is defined but never used.","'Bars' is defined but never used.","no-global-assign","no-unsafe-negation"]